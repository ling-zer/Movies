{"version":3,"file":"static/js/816.9547fea1.chunk.js","mappings":"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","sources":["components/ImgUploader.tsx","components/MovieForm.tsx","pages/movie/AddMovie.tsx"],"sourcesContent":["import { message, Modal, Upload } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { PlusOutlined } from \"@ant-design/icons\"\r\nimport { UploadRequestOption } from \"rc-upload/lib/interface\"\r\nimport { IResponseData, IResponseError } from \"../services/CommonTypes\";\r\nimport { UploadFile } from \"antd/lib/upload/interface\";\r\n\r\ninterface IImgUploaderProps {\r\n    value?: string,\r\n    /**\r\n     * 手动上传\r\n     */\r\n    onChange?: (img: string) => void;\r\n}\r\n\r\nexport const ImgUploader: React.FC<IImgUploaderProps> = function (props) {\r\n    const [previewVisible, setPreviewVisible] = useState(false);\r\n    // 上传图片后，根据filelist的url进行显示\r\n    const fileList: UploadFile<any>[] = props.value ? [\r\n        {\r\n            uid: props.value,\r\n            name: props.value,\r\n            url: props.value\r\n        }\r\n    ] : []\r\n    return (\r\n        <div>\r\n            <Upload\r\n                action=\"/api/upload\"\r\n                listType=\"picture-card\"\r\n                name=\"imgfile\"\r\n                accept=\".jpg,.png,.gif,.jiff\"\r\n                fileList={fileList}\r\n                customRequest={(options) => {\r\n                    handleRequest(options, props)\r\n                }}\r\n                onRemove={() => {\r\n                    props.onChange && props.onChange(\"\")\r\n                }}\r\n                onPreview={() => {\r\n                    setPreviewVisible(true);\r\n                }}\r\n            >\r\n                {props.value ? null :\r\n                    (<div>\r\n                        <PlusOutlined />\r\n                        <div style={{ marginTop: 8 }}>Upload</div>\r\n                    </div>)\r\n                }\r\n            </Upload>\r\n            <Modal\r\n                visible={previewVisible} footer={null} onCancel={() => {\r\n                    setPreviewVisible(false);\r\n                }}\r\n            >\r\n                <img src={props.value} alt=\"\" style={{ width: '100%' }} />\r\n            </Modal>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nasync function handleRequest(p: UploadRequestOption, props: IImgUploaderProps) {\r\n    let formData = new FormData();\r\n    formData.append(p.filename!, p.file)\r\n    // fetch api\r\n    const request = new Request(p.action, {\r\n        method: \"post\",\r\n        body: formData\r\n    })\r\n    const resp: IResponseData<string> | IResponseError = await fetch(request).then(resp => resp.json());\r\n    if (resp.err) {\r\n        message.error(`上传失败！${resp.err}`)\r\n    } else {\r\n        props.onChange && props.onChange(resp.data!);\r\n    }\r\n}","import { Button, Checkbox, Form, Input, message, Switch } from \"antd\"\r\nimport React from \"react\"\r\nimport { IMovie } from \"../services/MovieService\"\r\nimport { ImgUploader } from \"./ImgUploader\"\r\nimport { NavigateFunction, useNavigate } from \"react-router\"\r\nimport { FormInstance } from \"antd\"\r\n\r\n\r\nconst allAreas: {label: string, value: string}[] = [\r\n    {label: \"中国大陆\", value: \"中国大陆\"},\r\n    {label: \"中国香港\", value: \"中国香港\"},\r\n    {label: \"中国台湾\", value: \"中国台湾\"},\r\n    {label: \"美国\", value: \"美国\"},\r\n    {label: \"日本\", value: \"日本\"}\r\n]\r\n\r\nconst allTypes: {label: string, value: string}[] = [\r\n    {label: \"喜剧\", value: \"喜剧\"},\r\n    {label: \"动作\", value: \"动作\"},\r\n    {label: \"灾难\", value: \"灾难\"},\r\n    {label: \"爱情\", value: \"爱情\"},\r\n    {label: \"科幻\", value: \"科幻\"}\r\n]\r\n\r\ninterface IFormProp {\r\n    /**\r\n     * 提交数据\r\n     */\r\n    onSubmit: (movie: IMovie) => Promise<string>\r\n    /**\r\n     * 路由跳转\r\n     */\r\n    navigate?: NavigateFunction\r\n    /**\r\n     * 获取Form组件\r\n     */\r\n    ref1?: React.ForwardedRef<FormInstance<any>>\r\n}\r\n\r\nclass MovieForm extends React.Component<IFormProp> {\r\n    /**\r\n     * 提交表单且数据验证成功后回调事件\r\n     */\r\n    private async finished(value: any) {\r\n        const result = await this.props.onSubmit(value as IMovie)\r\n        if(result) {\r\n            message.error(result)\r\n        } else {\r\n            message.success(\"处理成功\");\r\n            // 跳转页面\r\n            this.props.navigate && this.props.navigate(-1)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                name=\"basic\"\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 8 }}\r\n                autoComplete=\"off\"\r\n                onFinish={this.finished.bind(this)}\r\n                ref={this.props.ref1}\r\n                \r\n            >\r\n                <Form.Item\r\n                    label=\"电影名称\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: '电影名称不能为空!' }]}\r\n                >\r\n                    <Input aria-placeholder=\"movie name\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item aria-label=\"move type\" label=\"电影类型\" name=\"types\" wrapperCol={{ offset: 0, span: 16 }} rules={[{required: true, message: \"电影类型不能为空\"}]}>\r\n                    <Checkbox.Group \r\n                        options={allTypes}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"上映地区\"\r\n                    name=\"area\"\r\n                    wrapperCol={{ offset: 0, span: 16 }}\r\n                    rules={[{ required: true, message: '上映地区不能为空!' }]}\r\n                    aria-label=\"showing area\"\r\n                >\r\n                    <Checkbox.Group \r\n                        options={allAreas}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"时长 (分钟)\"\r\n                    aria-label=\"duration\"\r\n                    name=\"timeLong\"\r\n                    rules={[{required: true, message: \"时长不能为空\"}, \r\n                    {pattern: /^([1-9]\\d{0,2})$/, message: \"时长必须在1~999之间\"}]}\r\n                >\r\n                    <Input type=\"number\" min={1} max={999} aria-placeholder=\"duration\"/>\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item \r\n                    label=\"正在热映\"\r\n                    aria-label=\"is hot\"\r\n                    name=\"isHot\"\r\n                    initialValue={false}\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Switch />\r\n                </Form.Item>\r\n\r\n                <Form.Item \r\n                    label=\"即将上映\"\r\n                    aria-label=\"coming soon\"\r\n                    name=\"isComing\"\r\n                    initialValue={false}\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Switch />\r\n                </Form.Item>\r\n\r\n                <Form.Item \r\n                    label=\"经典影片\"\r\n                    aria-label=\"is classic\"\r\n                    name=\"isClassic\"\r\n                    initialValue={false}\r\n                    valuePropName=\"checked\"\r\n                >\r\n                    <Switch />\r\n                </Form.Item>\r\n\r\n                <Form.Item \r\n                    label=\"电影描述\"\r\n                    aria-label=\"description\"\r\n                    name=\"description\"\r\n                >\r\n                    <Input.TextArea aria-placeholder=\"movie description\"/>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"海报\"\r\n                    aria-label=\"poster\"\r\n                    name=\"poster\"\r\n                >\r\n                    <ImgUploader />\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\" aria-label=\"submit\">\r\n                        提交\r\n                    </Button>\r\n                    <Button htmlType=\"button\" aria-label=\"return\"\r\n                        onClick={() => {\r\n                            this.props.navigate && this.props.navigate(-1)\r\n                        }}\r\n                        style={{\r\n                            marginLeft: 50\r\n                        }}>\r\n                        返回\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n// 传递navigate函数，用于路由跳转\r\n// ref转发\r\nconst MovieFormWrapper = React.forwardRef<FormInstance, IFormProp>((props, ref)=>{\r\n    return <MovieForm {...props} ref1={ref} navigate={useNavigate()}/>\r\n  })\r\n\r\nexport default MovieFormWrapper","import React, { Component } from 'react'\r\nimport MovieForm from '../../components/MovieForm'\r\nimport { MovieService } from '../../services/MovieService'\r\n\r\nexport default class AddMovie extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <MovieForm onSubmit={async(movie) => {\r\n        const resp = await MovieService.add(movie)\r\n        if(resp.data) {\r\n          return \"\"\r\n        } else {\r\n          return resp.err\r\n        }\r\n      }}/>\r\n    )\r\n  }\r\n}\r\n"],"names":["ImgUploader","props","useState","previewVisible","setPreviewVisible","fileList","value","uid","name","url","action","listType","accept","customRequest","options","handleRequest","onRemove","onChange","onPreview","PlusOutlined","style","marginTop","visible","footer","onCancel","src","alt","width","p","formData","FormData","append","filename","file","request","Request","method","body","fetch","then","resp","json","err","message","data","allAreas","label","allTypes","MovieForm","this","onSubmit","result","navigate","labelCol","span","wrapperCol","autoComplete","onFinish","finished","bind","ref","ref1","rules","required","offset","pattern","type","min","max","initialValue","valuePropName","htmlType","onClick","marginLeft","React","useNavigate","AddMovie","movie","MovieService","Component"],"sourceRoot":""}