{"version":3,"file":"static/js/313.a91d0c2c.chunk.js","mappings":"sJAsBYA,E,gRAAZ,SAAYA,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,SAAAA,WAAAA,EAAAA,UAAAA,YAAZ,CAAYA,IAAAA,EAAAA,K,IC4LUC,E,6BAvKhBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAoKD,OApKCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MACF,WACQC,KAAKC,MAAMC,QACXF,KAAKC,MAAMC,WAElB,gCAED,SAA2BC,GAAY,IAAD,OAClC,OACI,iBAAKC,MAAO,CAAEC,QAAS,GAAvB,WACI,cACID,MAAO,CAAEE,aAAc,EAAGC,QAAS,SACnCC,MAAOR,KAAKC,MAAMQ,UAAUC,IAC5BC,SAAU,SAAAC,GAAC,OAAI,EAAKX,MAAMY,YAAYD,EAAEE,OAAON,QAC/CO,aAAcf,KAAKC,MAAMe,YAE7B,0BACI,cACIC,KAAK,UACLC,MAAM,SAACC,EAAA,EAAD,IACNC,KAAK,QACLhB,MAAO,CAAEiB,MAAO,IAChBC,QAAStB,KAAKC,MAAMe,SALxB,2BASA,cACII,KAAK,QACLhB,MAAO,CAAEiB,MAAO,IAChBC,QAAS,WACL,EAAKrB,MAAMY,YAAY,IACvB,EAAKZ,MAAMe,YALnB,kCAaf,uBAED,WAA0C,IAAD,OACrC,MAAO,CACH,CACIO,MAAO,eACPC,UAAW,SACXC,OAAQ,SAAAC,GACJ,OAAIA,GACO,gBAAKC,UAAU,cAAcC,IAAKF,EAAQG,IAAI,MAElD,gBAAKF,UAAU,cAAcC,IAAKE,EAAeD,IAAI,OAGpE,CACIN,MAAO,eAAMC,UAAW,OACxBO,eAAgB/B,KAAKgC,mBAAmBC,KAAKjC,MAC7CkC,YAAY,SAACf,EAAA,EAAD,KAEhB,CACII,MAAO,eAAMC,UAAW,OACxBC,OAAQ,SAACU,GACL,OAAOA,EAAKC,KAAK,SAGzB,CACIb,MAAO,eAAMC,UAAW,QACxBC,OAAQ,SAACU,GACL,OAAOA,EAAKC,KAAK,SAGzB,CACIb,MAAO,eAAMC,UAAW,WACxBC,OAAQ,SAAAU,GACJ,OAAOA,EAAO,gBAElBE,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,SAAWD,EAAEC,WAErC,CACIjB,MAAO,2BACPC,UAAW,QACXC,OAAQ,SAACgB,EAAOC,GACZ,OAAO,cAAQC,eAAgBF,EAAO9B,SAAU,SAACiC,GAC7C,EAAK3C,MAAM4C,eAAehD,EAAW4C,MAAOG,EAAQF,EAAOI,UAIvE,CACIvB,MAAO,2BACPC,UAAW,WACXC,OAAQ,SAACsB,EAAUL,GACf,OAAO,cAAQC,eAAgBI,EAAUpC,SAAU,SAACiC,GAChD,EAAK3C,MAAM4C,eAAehD,EAAWkD,SAAUH,EAAQF,EAAOI,UAI1E,CACIvB,MAAO,2BACPC,UAAW,YACXC,OAAQ,SAACuB,EAAoBN,GACzB,OAAO,cAAQC,eAAgBK,EAAWrC,SAAU,SAACiC,GACjD,EAAK3C,MAAM4C,eAAehD,EAAWmD,UAAWJ,EAAQF,EAAOI,UAK3E,CACIvB,MAAO,eACPC,UAAW,MACXC,OAAQ,SAACwB,EAAYP,GACjB,OACI,4BACI,cAAQ,aAAW,OAAOzB,KAAK,UAAUG,KAAK,QAAQE,QAAS,WAC3D,EAAKrB,MAAMiD,SAAX,sBAAmCD,KADvC,2BAGA,cACI1B,MAAM,0DACN4B,WAAS,uBAAE,mGACD,EAAKlD,MAAMmD,SAASH,GADnB,OAEPI,EAAA,WAAgB,4BAChB,EAAKpD,MAAMe,WAHJ,2CAKXsC,OAAO,eACPC,WAAW,eARf,UAUI,cAAQ,aAAW,SAASC,QAAM,EAACpC,KAAK,QAAQhB,MAAO,CACnDqD,WAAY,GADhB,oCAU3B,4BAED,WACI,OAAyB,IAArBzD,KAAKC,MAAMyD,OAGR,CACHC,QAAS3D,KAAKC,MAAMQ,UAAUmD,KAC9BC,SAAU7D,KAAKC,MAAMQ,UAAUqD,MAC/BJ,MAAO1D,KAAKC,MAAMyD,SAEzB,0BAED,SAAaK,EAAmCC,GAC5ChE,KAAKC,MAAMU,SAASoD,EAAWJ,QAAUI,EAAWF,YACvD,oBAED,WACI,OACI,cACII,OAAO,MACPC,WAAYlE,KAAKC,MAAMkE,KACvBC,QAASpE,KAAKqE,YACdN,WACI/D,KAAKsE,iBAET3D,SAAUX,KAAKuE,aAAatC,KAAKjC,MACjCwE,QAASxE,KAAKC,MAAMwE,gBAG/B,EApKC1E,CAAmB2E,EAAAA,WA2KzB,GAJsB5E,EAIMC,EAHjB,SAACE,GAAD,OAAgB,SAACH,GAAD,kBAAUG,GAAV,IAAiBiD,UAAUyB,EAAAA,EAAAA,W,oBCpKtD,OAAeC,EAAAA,EAAAA,KA1Cf,SAAyBC,GACvB,OAAOA,EAAMC,SAGf,SAA4BC,GAC1B,MAAO,CACL7E,OADK,WAEH6E,GAASC,EAAAA,EAAAA,IAAY,CACnBpB,KAAM,EACNE,MAAO,GACPpD,IAAK,OAGTmC,eARK,SAQU5B,EAAM2B,EAAQK,GAC3B8B,GAASE,EAAAA,EAAAA,IAAkB,CACzBhE,KAAAA,EACA2B,OAAAA,EACAK,GAAAA,MAGEG,SAfD,SAeUH,GAAK,OAAD,0HACX8B,GAASG,EAAAA,EAAAA,IAAgBjC,IADd,8CAGnBtC,SAlBK,SAkBIwE,EAASC,GAChBL,GAASC,EAAAA,EAAAA,IAAY,CACnBpB,KAAMuB,EACNrB,MAAOsB,MAGXvE,YAxBK,SAwBOwE,GACVN,GAASO,EAAAA,EAAAA,IAAa,CACpB5E,IAAK2E,MAGTrE,SA7BK,WA8BH+D,GAASC,EAAAA,EAAAA,IAAY,CACnBpB,KAAM,SAMd,CAA4D7D","sources":["services/CommonTypes.ts","components/MovieTable.tsx","pages/movie/MovieList.tsx"],"sourcesContent":["export interface IResponseError {\r\n    err: string,\r\n    data: null\r\n}\r\n\r\nexport interface IResponseData<T> {\r\n    err: null,\r\n    data: T\r\n}\r\n\r\nexport interface IResponsePageData<T> {\r\n    err: null,\r\n    total: number,\r\n    data: T[]\r\n}\r\n\r\nexport interface ISearchCondtion {\r\n    page?: number,\r\n    limit?: number,\r\n    key?: string\r\n}\r\n\r\nexport enum SwitchType {\r\n    isHot = \"isHot\",\r\n    isComing = \"isComing\",\r\n    isClassic = \"isClassic\"\r\n}","import React from \"react\";\r\nimport { IMovieState } from \"../redux/features/MovieSlice\";\r\nimport { Table, Switch, Button, message, Popconfirm, Space, Input } from \"antd\";\r\nimport { ColumnsType, FilterValue, TablePaginationConfig } from \"antd/lib/table/interface\";\r\nimport { IMovie } from \"../services/MovieService\";\r\nimport defaultPoster from \"../assets/default.jpg\";\r\nimport \"./MovieTable.css\"\r\nimport { SwitchType } from \"../services/CommonTypes\";\r\nimport { NavigateFunction, useNavigate } from \"react-router\";\r\nimport { SearchOutlined } from \"@ant-design/icons\"\r\n\r\n\r\nexport interface IMovieTableEvent {\r\n    /**\r\n     * 完成加载之后的事件\r\n     */\r\n    onLoad: () => void,\r\n    /**\r\n     * 切换Switch状态\r\n     */\r\n    onSwitchChange: (type: SwitchType, newVal: boolean, id: string) => void\r\n    /**\r\n     * 删除电影\r\n     */\r\n    onDelete: (id: string) => Promise<void>,\r\n    /**\r\n     * 页码或页容量改变\r\n     */\r\n    onChange: (newPage: number, newLimit: number) => void\r\n    /**\r\n     * 查询条件key改变\r\n     */\r\n    onKeyChange: (newKey: string) => void\r\n    /**\r\n     * 搜素\r\n     */\r\n    onSearch: () => void\r\n}\r\n\r\nexport interface INavigate {\r\n    navigate: NavigateFunction\r\n}\r\n\r\nclass MovieTable extends React.Component<IMovieTableEvent & IMovieState & INavigate> {\r\n    componentDidMount() {\r\n        if (this.props.onLoad) {\r\n            this.props.onLoad();\r\n        }\r\n    }\r\n\r\n    private getFilterDrowpdown(p: Object) {\r\n        return (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    style={{ marginBottom: 8, display: 'block' }}\r\n                    value={this.props.condition.key}\r\n                    onChange={e => this.props.onKeyChange(e.target.value)}\r\n                    onPressEnter={this.props.onSearch}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        icon={<SearchOutlined />}\r\n                        size=\"small\"\r\n                        style={{ width: 90 }}\r\n                        onClick={this.props.onSearch}\r\n                    >\r\n                        搜索\r\n                    </Button>\r\n                    <Button\r\n                        size=\"small\"\r\n                        style={{ width: 90 }}\r\n                        onClick={() => {\r\n                            this.props.onKeyChange(\"\")\r\n                            this.props.onSearch()\r\n                        }}\r\n                    >\r\n                        重置\r\n                    </Button>\r\n                </Space>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private getCloums(): ColumnsType<IMovie> {\r\n        return [\r\n            {\r\n                title: \"海报\",\r\n                dataIndex: \"poster\",\r\n                render: poster => {\r\n                    if (poster) {\r\n                        return <img className=\"tablePoster\" src={poster} alt=\"\" />\r\n                    }\r\n                    return <img className=\"tablePoster\" src={defaultPoster} alt=\"\" />\r\n                }\r\n            },\r\n            {\r\n                title: \"名称\", dataIndex: \"name\",\r\n                filterDropdown: this.getFilterDrowpdown.bind(this),\r\n                filterIcon: <SearchOutlined />\r\n            },\r\n            {\r\n                title: \"地区\", dataIndex: \"area\",\r\n                render: (text: string[]) => {\r\n                    return text.join(' , ')\r\n                }\r\n            },\r\n            {\r\n                title: \"类型\", dataIndex: \"types\",\r\n                render: (text: string[]) => {\r\n                    return text.join(' , ')\r\n                }\r\n            },\r\n            {\r\n                title: \"时长\", dataIndex: \"timeLong\",\r\n                render: text => {\r\n                    return text + \"分钟\"\r\n                },\r\n                sorter: (a, b) => a.timeLong - b.timeLong\r\n            },\r\n            {\r\n                title: \"正在热映\",\r\n                dataIndex: \"isHot\",\r\n                render: (isHot, record) => {\r\n                    return <Switch defaultChecked={isHot} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchType.isHot, newVal, record._id!)\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: \"即将上映\",\r\n                dataIndex: \"isComing\",\r\n                render: (isComing, record) => {\r\n                    return <Switch defaultChecked={isComing} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchType.isComing, newVal, record._id!)\r\n                    }} />\r\n                }\r\n            },\r\n            {\r\n                title: \"经典影片\",\r\n                dataIndex: \"isClassic\",\r\n                render: (isClassic: boolean, record) => {\r\n                    return <Switch defaultChecked={isClassic} onChange={(newVal) => {\r\n                        this.props.onSwitchChange(SwitchType.isClassic, newVal, record._id!)\r\n                    }} />\r\n                }\r\n            }\r\n            ,\r\n            {\r\n                title: \"操作\",\r\n                dataIndex: \"_id\",\r\n                render: (id: string, record) => {\r\n                    return (\r\n                        <div>\r\n                            <Button aria-label=\"edit\" type=\"primary\" size=\"small\" onClick={() => {\r\n                                this.props.navigate(`/movie/edit/${id}`)\r\n                            }}>编辑</Button>\r\n                            <Popconfirm\r\n                                title=\"确认删除该条数据吗?\"\r\n                                onConfirm={async () => {\r\n                                    await this.props.onDelete(id)\r\n                                    message.success(\"删除成功\");\r\n                                    this.props.onSearch()\r\n                                }}\r\n                                okText=\"确定\"\r\n                                cancelText=\"取消\"\r\n                            >\r\n                                <Button aria-label=\"delete\" danger size=\"small\" style={{\r\n                                    marginLeft: 5\r\n                                }}>删除</Button>\r\n                            </Popconfirm>\r\n\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\n    getPaginConfig(): false | TablePaginationConfig | undefined {\r\n        if (this.props.total === 0) {\r\n            return false;\r\n        }\r\n        return {\r\n            current: this.props.condition.page,\r\n            pageSize: this.props.condition.limit,\r\n            total: this.props.total\r\n        }\r\n    }\r\n\r\n    handleChange(pagination: TablePaginationConfig, filters: Record<string, FilterValue | null>) {\r\n        this.props.onChange(pagination.current!, pagination.pageSize!)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Table\r\n                rowKey=\"_id\"\r\n                dataSource={this.props.data}\r\n                columns={this.getCloums()}\r\n                pagination={\r\n                    this.getPaginConfig()\r\n                }\r\n                onChange={this.handleChange.bind(this)}\r\n                loading={this.props.isLoading}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst withNavigate = (Comp: typeof MovieTable) => {\r\n    return (props: any) => <Comp {...props} navigate={useNavigate()} />\r\n}\r\n\r\nexport default withNavigate(MovieTable)","import MovieTable, { IMovieTableEvent } from '../../components/MovieTable'\r\nimport {connect} from \"react-redux\"\r\nimport { AppDispatch, RootState } from '../../redux'\r\nimport { changeMovieSwitch, deleteMovieById, fetchMovies, IMovieState, setCondition } from '../../redux/features/MovieSlice';\r\n\r\nfunction mapStateToProps(state: RootState): IMovieState {\r\n  return state.movie\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: AppDispatch): IMovieTableEvent  {\r\n  return {\r\n    onLoad() {\r\n      dispatch(fetchMovies({\r\n        page: 1,\r\n        limit: 10,\r\n        key: \"\"\r\n      }))\r\n    },\r\n    onSwitchChange(type, newVal, id) {\r\n      dispatch(changeMovieSwitch({\r\n        type,\r\n        newVal,\r\n        id\r\n      }))\r\n    },\r\n    async onDelete(id) {\r\n      await dispatch(deleteMovieById(id))\r\n    },\r\n    onChange(newPage, newLimit) {\r\n      dispatch(fetchMovies({\r\n        page: newPage,\r\n        limit: newLimit\r\n      }))\r\n    },\r\n    onKeyChange(newKey) {\r\n      dispatch(setCondition({\r\n        key: newKey\r\n      }))\r\n    },\r\n    onSearch() {\r\n      dispatch(fetchMovies({\r\n        page: 1\r\n      }))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTable);\r\n"],"names":["SwitchType","Comp","MovieTable","this","props","onLoad","p","style","padding","marginBottom","display","value","condition","key","onChange","e","onKeyChange","target","onPressEnter","onSearch","type","icon","SearchOutlined","size","width","onClick","title","dataIndex","render","poster","className","src","alt","defaultPoster","filterDropdown","getFilterDrowpdown","bind","filterIcon","text","join","sorter","a","b","timeLong","isHot","record","defaultChecked","newVal","onSwitchChange","_id","isComing","isClassic","id","navigate","onConfirm","onDelete","message","okText","cancelText","danger","marginLeft","total","current","page","pageSize","limit","pagination","filters","rowKey","dataSource","data","columns","getCloums","getPaginConfig","handleChange","loading","isLoading","React","useNavigate","connect","state","movie","dispatch","fetchMovies","changeMovieSwitch","deleteMovieById","newPage","newLimit","newKey","setCondition"],"sourceRoot":""}